version: "3.8"

services:
  backend:
    env_file:
      - .env
    build:
      # On utilise la racine du monorepo comme contexte
      context: .
      # Le Dockerfile se trouve dans le dossier du backend
      dockerfile: packages/backend/Dockerfile
    container_name: nodejs_backend
    ports:
      - "4000:4000"
      - "5555:5555"
    # Volumes pour le dev (live reload)
    volumes:
      # 1) Monte tout le monorepo dans /app pour permettre de travailler sur le code
      - .:/app
      # 2) Monte un dossier node_modules séparé pour éviter qu'il soit écrasé
      - /app/node_modules
    # Le dossier de travail (là où les commandes seront lancées)
    working_dir: /app/packages/backend
    # Commande de lancement en mode développement
    command: yarn start:dev
    environment:
      - PORT=${BACKEND_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - database
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: react_frontend
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    working_dir: /app/packages/frontend
    command: yarn start
    depends_on:
      - backend
    restart: unless-stopped

  database:
    env_file:
      - .env
    image: postgres:15-alpine
    container_name: postgresql_database
    environment:
      - POSTGRES_DB={POSTGRES_DB}
      - POSTGRES_USER={POSTGRES_USER}
      - POSTGRES_PASSWORD={POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local