version: "3.8"

services:
  backend:
    # env_file:
    #   - .env
    build:
      # On utilise la racine du monorepo comme contexte
      context: .
      # Le Dockerfile se trouve dans le dossier du backend
      dockerfile: packages/backend/Dockerfile.prod
    container_name: nodejs_backend
    ports:
      - "4000:4000"
    # environment:
    #   - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_database:5432/${POSTGRES_DB}
    #   - PORT=${BACKEND_PORT}
    #   - NODE_ENV=production
    #   - FRONTEND_URL=${FRONTEND_URL}
      # Optionnel : plusieurs origines autorisées
    depends_on:
      - database
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.prod
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    env_file:
      - .env
    container_name: react_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - backend
    restart: unless-stopped
    # Ajoutez les labels Traefik si nécessaire
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www.saas.paulmulin.fr`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  database:
    env_file:
      - .env
    image: postgres:15-alpine
    container_name: postgresql_database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
